---
- name: "Start operations.."
  meta: noop


- name: "Initialization.."
  win_file:
    path: '{{ win_temp_dir_path }}'
    state: directory


                    

- name: "[PRE-SETUP] (1/3) Check 'nvm' status *BEFORE* installation"
  win_shell: |
    $appName = "nvm"
    $wmiQuery = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*$appName*" }
    $regPath1 = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall"
    $regPath2 = "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
    $regCheck1 = Get-ChildItem -Path $regPath1 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    $regCheck2 = Get-ChildItem -Path $regPath2 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    if ($wmiQuery -or $regCheck1 -or $regCheck2) { $status = "Installed" } else { $status = "Not Installed" }
    Write-Host "$appName is $status"
  register: initial_software_status
  changed_when: false
  no_log: true

- name: "[PRE-SETUP] (1/3) Check if HTTP authentication is required for file download"
  win_shell: |
    $url = "{{ pkgs_repo_base_url }}/nodejs/nvm-noinstall.zip"
    $responseStatusCode = $(try { Invoke-WebRequest -Uri $url -Method Head -UseBasicParsing | % {$_.StatusCode} } catch {$_.Exception.Response.StatusCode.Value__})

    if ($responseStatusCode -eq 401) { 
        Write-Host "Auth required" 
    } else { 
        Write-Host "Auth not required" 
    }
  register: auth_check
  changed_when: false
  no_log: true
  when: "'Not Installed' in initial_software_status.stdout"


- name: "[PRE-SETUP] (1/3) Download 'nvm' files (with authentication)"
  win_get_url:
    url: "{{ pkgs_repo_base_url }}/nodejs/nvm-noinstall.zip"
    dest: '{{ win_temp_dir_path }}\nvm-noinstall.zip'
    username: "{{ http_auth_username }}"
    password: "{{ http_auth_password }}"
  when: "'Not Installed' in initial_software_status.stdout and 'Auth required' in auth_check.stdout"


- name: "[PRE-SETUP] (1/3) Download 'nvm' files (without authentication)"
  win_get_url:
    url: "{{ pkgs_repo_base_url }}/nodejs/nvm-noinstall.zip"
    dest: '{{ win_temp_dir_path }}\nvm-noinstall.zip'
  when: "'Not Installed' in initial_software_status.stdout and 'Auth not required' in auth_check.stdout"

 


  


- name: "[PRE-SETUP] (1/3) Check custom target installation directory"
  win_file:
    path: 'D:\AppServ'
    state: directory
  when: "'Not Installed' in initial_software_status.stdout"


- name: "[PRE-SETUP] (1/3) Unzip 'nvm-noinstall.zip'"
  win_unzip:
    src: '{{ win_temp_dir_path }}\nvm-noinstall.zip'
    dest: 'D:\AppServ\nvm'
    creates: 'D:\AppServ\nvm'
  when: "'Not Installed' in initial_software_status.stdout"


- name: "[PRE-SETUP] (1/3) Install 'nvm'"
  win_shell: |
    $installResult = $null
    $installSuccess = $false

    try {
      $mainAppLauncher = 'D:\AppServ'
      $mainAppLauncher += '\'
      $mainAppLauncher += 'nvm'
      $mainAppLauncher += '\'
      $mainAppLauncher += ''
      $softwareVersion = $((Get-Item $mainAppLauncher).VersionInfo.ProductVersion)
      
      $registryPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\nvm$(if($softwareVersion){' '+$softwareVersion})"

      # Generate uninstaller file content
      $uninstallerScriptContent = @"
    # Define the path to the folder to be deleted
    `$folderPath = Split-Path -Parent -Path `$MyInvocation.MyCommand.Path

    # Remove the read-only attribute if it is set
    if ((Get-Item `$folderPath).Attributes -band [System.IO.FileAttributes]::ReadOnly) {
        Set-ItemProperty -Path `$folderPath -Name IsReadOnly -Value `$false
    }

    `$publicDesktopShortcut = `"`$env:PUBLIC\Desktop\nvm*.lnk`"
    `$commonStartMenuShortcut = `"`$env:ALLUSERSPROFILE\Microsoft\Windows\Start Menu\Programs\nvm*.lnk`"

    # Check if shared shortcuts exist and remove them
    if (Test-Path -Path `$publicDesktopShortcut) {
        Remove-Item -Path `$publicDesktopShortcut -Recurse -Force
    }
    if (Test-Path -Path `$commonStartMenuShortcut) {
        Remove-Item -Path `$commonStartMenuShortcut -Recurse -Force
    }

    # Delete the folder and its contents
    Remove-Item -Path `$folderPath -Force -Recurse

    Remove-Item -Path `"$registryPath`" -Recurse -Force
    "@

      Set-Content -Path "D:\AppServ\nvm\uninstall.ps1" -Value $uninstallerScriptContent

      $WshShell = New-Object -ComObject WScript.Shell
      $Shortcut = $WshShell.CreateShortcut("$env:ALLUSERSPROFILE\Microsoft\Windows\Start Menu\Programs\nvm.lnk")
      $startmenuTargetPath = 'D:\AppServ'
      $startmenuTargetPath += '\'
      $startmenuTargetPath += 'nvm'
      $startmenuTargetPath += '\'
      $startmenuTargetPath += ''
      $Shortcut.TargetPath = $startmenuTargetPath
            
      
      $Shortcut.Save()

      $directoryPath = "D:\AppServ\nvm"
      $directoryInfo = Get-Item -Path $directoryPath
      $directorySize = Get-ChildItem -Path $directoryPath -Recurse | Measure-Object -Property Length -Sum
      $sizeInBytes = $directorySize.Sum
      $sizeInKB = [math]::Round($sizeInBytes / 1KB)

      $registryREGSZValues = @{
          "DisplayName" = "nvm  __Manual Install__"
          "UninstallString" = "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File `"D:\AppServ\nvm\uninstall.ps1`" -Verb RunAs"
          "DisplayVersion" = "$softwareVersion"
      }

      New-Item -Path $registryPath -Force
      foreach ($key in $registryREGSZValues.Keys) {
          Set-ItemProperty -Path $registryPath -Name $key -Value $registryREGSZValues[$key]
      }

      New-ItemProperty -Path $registryPath -Name "EstimatedSize" -Value $sizeInKB -PropertyType DWORD -Force

      $installResult = 0
    } catch {
      $errorMessage = $_.Exception.Message
      Write-Host "ERROR: $errorMessage"
      $installResult = 1
    }
    if ($installResult -eq 0) {$installSuccess = $true}


    if (-not $installSuccess) {
        Write-Output "nvm installation failed. Exit Code: $installResult"
        exit 1 }
  register: component_install_result
  failed_when: component_install_result.rc != 0 or 'installation failed' in component_install_result.stdout
  when: "'Not Installed' in initial_software_status.stdout"


- name: "[PRE-SETUP] (1/3) Check 'nvm' status *AFTER* installation"
  win_shell: |
    $appName = "nvm"
    $wmiQuery = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*$appName*" }
    $regPath1 = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall"
    $regPath2 = "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
    $regPath3 = "HKLM:\SOFTWARE"
    $regCheck1 = Get-ChildItem -Path $regPath1 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    $regCheck2 = Get-ChildItem -Path $regPath2 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    $regCheck3 = Get-ChildItem -Path $regPath3 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    if ($wmiQuery -or $regCheck1 -or $regCheck2 -or $regCheck3) { $status = "Installed" } else { $status = "Not Installed" }
    Write-Host "$appName is $status"
  register: new_software_status
  changed_when: false
  failed_when: new_software_status.rc != 0 or 'Not Installed' in new_software_status.stdout
  ignore_errors: no  
  when: "'Not Installed' in initial_software_status.stdout"

                  







  
- name: "Initialization.."
  win_file:
    path: '{{ win_temp_dir_path }}'
    state: directory


                    


- name: '[PRE-SETUP] (2/3) Set "NVM_HOME" system environment variable'
  win_shell: |
    function IsVar($var) {
      if ($null -eq $var) {return $false}
      if ($var -is [string]) {return -not [string]::IsNullOrEmpty($var)}
      if ($var -is [array] -or $var -is [System.Collections.IEnumerable]) {return $var.Count -ne 0}
      return $true
    }
    try {
      $newEnvVarValue = 'D:\AppServ\nvm'
      $currentEnvVarValue = [Environment]::GetEnvironmentVariable("NVM_HOME", [System.EnvironmentVariableTarget]::Machine)
      $action = 'create'

      if (IsVar $currentEnvVarValue) {
        if ($action -eq 'append') {
          $envvarItemsList = $currentEnvVarValue -split ";"
          $envvarContainsNewVal = $envvarItemsList -contains $newEnvVarValue
          if (-not $envvarContainsNewVal) {
            $currentEnvVarValue += ';D:\AppServ\nvm'
            [Environment]::SetEnvironmentVariable("NVM_HOME", $currentEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] New value appended to system environment variable 'NVM_HOME'."
            exit 0
          } else {
              Write-Host "[OK_NO_CHANGE] Value already in system environment variable 'NVM_HOME'."
              exit 0
            }
        } elseif ('NVM_HOME' -eq 'PATH') {
            Write-Host "[KO_FAILURE] Only 'append' action is allowed for 'PATH' environment variable."
            exit 1
        } elseif ($action -eq 'modify') {
          if ($currentEnvVarValue -eq 'D:\AppServ\nvm') {
            Write-Host "[OK_NO_CHANGE] 'NVM_HOME' variable value already equals to 'D:\AppServ\nvm'."
            exit 0
          } else {
            [Environment]::SetEnvironmentVariable("NVM_HOME", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] System environment variable 'NVM_HOME' modified."
            exit 0
          }
        } elseif ($action -eq 'delete') {
          [Environment]::SetEnvironmentVariable("NVM_HOME", $null, [System.EnvironmentVariableTarget]::Machine)
          Write-Host "[OK_CHANGE] System environment variable 'NVM_HOME' deleted."
          exit 0
        } elseif ($action -eq 'create')  {
          if ($currentEnvVarValue -eq 'D:\AppServ\nvm') {
            Write-Host "[OK_NO_CHANGE] 'NVM_HOME' variable already exists with the value 'D:\AppServ\nvm'."
            exit 0
          } else {
            [Environment]::SetEnvironmentVariable("NVM_HOME", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] 'NVM_HOME' variable already exists, and so has been modified."
            exit 0
          }
        } else {
          Write-Host "[KO_FAILURE] unknown action 'create'."
          exit 1
        }
      } else {
        if (@('create', 'modify', 'append') -contains $action) {
          [Environment]::SetEnvironmentVariable("NVM_HOME", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
          Write-Host "[OK_CHANGE] System environment variable 'NVM_HOME' created."
          exit 0
        } else {
          Write-Host "[OK_NO_CHANGE] 'NVM_HOME' system environment variable does not exist."
          exit 0
        }
      }
    } catch {
      $errorMessage = $_.Exception.Message
      Write-Host "Unexpected exception/error: $errorMessage"
      exit 1
    }
  register: envvar_handling_result
  changed_when: envvar_handling_result.rc == 0 and 'OK_CHANGE' in envvar_handling_result.stdout
  failed_when: envvar_handling_result.rc != 0 or 'KO_FAILURE' in envvar_handling_result.stdout
  ignore_errors: yes


        


- name: '[PRE-SETUP] (2/3) Set "NVM_SYMLINK" system environment variable'
  win_shell: |
    function IsVar($var) {
      if ($null -eq $var) {return $false}
      if ($var -is [string]) {return -not [string]::IsNullOrEmpty($var)}
      if ($var -is [array] -or $var -is [System.Collections.IEnumerable]) {return $var.Count -ne 0}
      return $true
    }
    try {
      $newEnvVarValue = 'C:\Program Files\nodejs'
      $currentEnvVarValue = [Environment]::GetEnvironmentVariable("NVM_SYMLINK", [System.EnvironmentVariableTarget]::Machine)
      $action = 'create'

      if (IsVar $currentEnvVarValue) {
        if ($action -eq 'append') {
          $envvarItemsList = $currentEnvVarValue -split ";"
          $envvarContainsNewVal = $envvarItemsList -contains $newEnvVarValue
          if (-not $envvarContainsNewVal) {
            $currentEnvVarValue += ';C:\Program Files\nodejs'
            [Environment]::SetEnvironmentVariable("NVM_SYMLINK", $currentEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] New value appended to system environment variable 'NVM_SYMLINK'."
            exit 0
          } else {
              Write-Host "[OK_NO_CHANGE] Value already in system environment variable 'NVM_SYMLINK'."
              exit 0
            }
        } elseif ('NVM_SYMLINK' -eq 'PATH') {
            Write-Host "[KO_FAILURE] Only 'append' action is allowed for 'PATH' environment variable."
            exit 1
        } elseif ($action -eq 'modify') {
          if ($currentEnvVarValue -eq 'C:\Program Files\nodejs') {
            Write-Host "[OK_NO_CHANGE] 'NVM_SYMLINK' variable value already equals to 'C:\Program Files\nodejs'."
            exit 0
          } else {
            [Environment]::SetEnvironmentVariable("NVM_SYMLINK", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] System environment variable 'NVM_SYMLINK' modified."
            exit 0
          }
        } elseif ($action -eq 'delete') {
          [Environment]::SetEnvironmentVariable("NVM_SYMLINK", $null, [System.EnvironmentVariableTarget]::Machine)
          Write-Host "[OK_CHANGE] System environment variable 'NVM_SYMLINK' deleted."
          exit 0
        } elseif ($action -eq 'create')  {
          if ($currentEnvVarValue -eq 'C:\Program Files\nodejs') {
            Write-Host "[OK_NO_CHANGE] 'NVM_SYMLINK' variable already exists with the value 'C:\Program Files\nodejs'."
            exit 0
          } else {
            [Environment]::SetEnvironmentVariable("NVM_SYMLINK", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] 'NVM_SYMLINK' variable already exists, and so has been modified."
            exit 0
          }
        } else {
          Write-Host "[KO_FAILURE] unknown action 'create'."
          exit 1
        }
      } else {
        if (@('create', 'modify', 'append') -contains $action) {
          [Environment]::SetEnvironmentVariable("NVM_SYMLINK", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
          Write-Host "[OK_CHANGE] System environment variable 'NVM_SYMLINK' created."
          exit 0
        } else {
          Write-Host "[OK_NO_CHANGE] 'NVM_SYMLINK' system environment variable does not exist."
          exit 0
        }
      }
    } catch {
      $errorMessage = $_.Exception.Message
      Write-Host "Unexpected exception/error: $errorMessage"
      exit 1
    }
  register: envvar_handling_result
  changed_when: envvar_handling_result.rc == 0 and 'OK_CHANGE' in envvar_handling_result.stdout
  failed_when: envvar_handling_result.rc != 0 or 'KO_FAILURE' in envvar_handling_result.stdout
  ignore_errors: yes


        


- name: '[PRE-SETUP] (2/3) Append "%NVM_HOME%" to "PATH"'
  win_shell: |
    function IsVar($var) {
      if ($null -eq $var) {return $false}
      if ($var -is [string]) {return -not [string]::IsNullOrEmpty($var)}
      if ($var -is [array] -or $var -is [System.Collections.IEnumerable]) {return $var.Count -ne 0}
      return $true
    }
    try {
      $newEnvVarValue = '%NVM_HOME%'
      $currentEnvVarValue = [Environment]::GetEnvironmentVariable("PATH", [System.EnvironmentVariableTarget]::Machine)
      $action = 'append'

      if (IsVar $currentEnvVarValue) {
        if ($action -eq 'append') {
          $envvarItemsList = $currentEnvVarValue -split ";"
          $envvarContainsNewVal = $envvarItemsList -contains $newEnvVarValue
          if (-not $envvarContainsNewVal) {
            $currentEnvVarValue += ';%NVM_HOME%'
            [Environment]::SetEnvironmentVariable("PATH", $currentEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] New value appended to system environment variable 'PATH'."
            exit 0
          } else {
              Write-Host "[OK_NO_CHANGE] Value already in system environment variable 'PATH'."
              exit 0
            }
        } elseif ('PATH' -eq 'PATH') {
            Write-Host "[KO_FAILURE] Only 'append' action is allowed for 'PATH' environment variable."
            exit 1
        } elseif ($action -eq 'modify') {
          if ($currentEnvVarValue -eq '%NVM_HOME%') {
            Write-Host "[OK_NO_CHANGE] 'PATH' variable value already equals to '%NVM_HOME%'."
            exit 0
          } else {
            [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] System environment variable 'PATH' modified."
            exit 0
          }
        } elseif ($action -eq 'delete') {
          [Environment]::SetEnvironmentVariable("PATH", $null, [System.EnvironmentVariableTarget]::Machine)
          Write-Host "[OK_CHANGE] System environment variable 'PATH' deleted."
          exit 0
        } elseif ($action -eq 'create')  {
          if ($currentEnvVarValue -eq '%NVM_HOME%') {
            Write-Host "[OK_NO_CHANGE] 'PATH' variable already exists with the value '%NVM_HOME%'."
            exit 0
          } else {
            [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] 'PATH' variable already exists, and so has been modified."
            exit 0
          }
        } else {
          Write-Host "[KO_FAILURE] unknown action 'append'."
          exit 1
        }
      } else {
        if (@('create', 'modify', 'append') -contains $action) {
          [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
          Write-Host "[OK_CHANGE] System environment variable 'PATH' created."
          exit 0
        } else {
          Write-Host "[OK_NO_CHANGE] 'PATH' system environment variable does not exist."
          exit 0
        }
      }
    } catch {
      $errorMessage = $_.Exception.Message
      Write-Host "Unexpected exception/error: $errorMessage"
      exit 1
    }
  register: envvar_handling_result
  changed_when: envvar_handling_result.rc == 0 and 'OK_CHANGE' in envvar_handling_result.stdout
  failed_when: envvar_handling_result.rc != 0 or 'KO_FAILURE' in envvar_handling_result.stdout
  ignore_errors: yes


        


- name: '[PRE-SETUP] (2/3) Append "%NVM_SYMLINK%" to "PATH"'
  win_shell: |
    function IsVar($var) {
      if ($null -eq $var) {return $false}
      if ($var -is [string]) {return -not [string]::IsNullOrEmpty($var)}
      if ($var -is [array] -or $var -is [System.Collections.IEnumerable]) {return $var.Count -ne 0}
      return $true
    }
    try {
      $newEnvVarValue = '%NVM_SYMLINK%'
      $currentEnvVarValue = [Environment]::GetEnvironmentVariable("PATH", [System.EnvironmentVariableTarget]::Machine)
      $action = 'append'

      if (IsVar $currentEnvVarValue) {
        if ($action -eq 'append') {
          $envvarItemsList = $currentEnvVarValue -split ";"
          $envvarContainsNewVal = $envvarItemsList -contains $newEnvVarValue
          if (-not $envvarContainsNewVal) {
            $currentEnvVarValue += ';%NVM_SYMLINK%'
            [Environment]::SetEnvironmentVariable("PATH", $currentEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] New value appended to system environment variable 'PATH'."
            exit 0
          } else {
              Write-Host "[OK_NO_CHANGE] Value already in system environment variable 'PATH'."
              exit 0
            }
        } elseif ('PATH' -eq 'PATH') {
            Write-Host "[KO_FAILURE] Only 'append' action is allowed for 'PATH' environment variable."
            exit 1
        } elseif ($action -eq 'modify') {
          if ($currentEnvVarValue -eq '%NVM_SYMLINK%') {
            Write-Host "[OK_NO_CHANGE] 'PATH' variable value already equals to '%NVM_SYMLINK%'."
            exit 0
          } else {
            [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] System environment variable 'PATH' modified."
            exit 0
          }
        } elseif ($action -eq 'delete') {
          [Environment]::SetEnvironmentVariable("PATH", $null, [System.EnvironmentVariableTarget]::Machine)
          Write-Host "[OK_CHANGE] System environment variable 'PATH' deleted."
          exit 0
        } elseif ($action -eq 'create')  {
          if ($currentEnvVarValue -eq '%NVM_SYMLINK%') {
            Write-Host "[OK_NO_CHANGE] 'PATH' variable already exists with the value '%NVM_SYMLINK%'."
            exit 0
          } else {
            [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] 'PATH' variable already exists, and so has been modified."
            exit 0
          }
        } else {
          Write-Host "[KO_FAILURE] unknown action 'append'."
          exit 1
        }
      } else {
        if (@('create', 'modify', 'append') -contains $action) {
          [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
          Write-Host "[OK_CHANGE] System environment variable 'PATH' created."
          exit 0
        } else {
          Write-Host "[OK_NO_CHANGE] 'PATH' system environment variable does not exist."
          exit 0
        }
      }
    } catch {
      $errorMessage = $_.Exception.Message
      Write-Host "Unexpected exception/error: $errorMessage"
      exit 1
    }
  register: envvar_handling_result
  changed_when: envvar_handling_result.rc == 0 and 'OK_CHANGE' in envvar_handling_result.stdout
  failed_when: envvar_handling_result.rc != 0 or 'KO_FAILURE' in envvar_handling_result.stdout
  ignore_errors: yes


        


- name: '[PRE-SETUP] (2/3) Append "D:\AppServ\nvm" to "PATH"'
  win_shell: |
    function IsVar($var) {
      if ($null -eq $var) {return $false}
      if ($var -is [string]) {return -not [string]::IsNullOrEmpty($var)}
      if ($var -is [array] -or $var -is [System.Collections.IEnumerable]) {return $var.Count -ne 0}
      return $true
    }
    try {
      $newEnvVarValue = 'D:\AppServ\nvm'
      $currentEnvVarValue = [Environment]::GetEnvironmentVariable("PATH", [System.EnvironmentVariableTarget]::Machine)
      $action = 'append'

      if (IsVar $currentEnvVarValue) {
        if ($action -eq 'append') {
          $envvarItemsList = $currentEnvVarValue -split ";"
          $envvarContainsNewVal = $envvarItemsList -contains $newEnvVarValue
          if (-not $envvarContainsNewVal) {
            $currentEnvVarValue += ';D:\AppServ\nvm'
            [Environment]::SetEnvironmentVariable("PATH", $currentEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] New value appended to system environment variable 'PATH'."
            exit 0
          } else {
              Write-Host "[OK_NO_CHANGE] Value already in system environment variable 'PATH'."
              exit 0
            }
        } elseif ('PATH' -eq 'PATH') {
            Write-Host "[KO_FAILURE] Only 'append' action is allowed for 'PATH' environment variable."
            exit 1
        } elseif ($action -eq 'modify') {
          if ($currentEnvVarValue -eq 'D:\AppServ\nvm') {
            Write-Host "[OK_NO_CHANGE] 'PATH' variable value already equals to 'D:\AppServ\nvm'."
            exit 0
          } else {
            [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] System environment variable 'PATH' modified."
            exit 0
          }
        } elseif ($action -eq 'delete') {
          [Environment]::SetEnvironmentVariable("PATH", $null, [System.EnvironmentVariableTarget]::Machine)
          Write-Host "[OK_CHANGE] System environment variable 'PATH' deleted."
          exit 0
        } elseif ($action -eq 'create')  {
          if ($currentEnvVarValue -eq 'D:\AppServ\nvm') {
            Write-Host "[OK_NO_CHANGE] 'PATH' variable already exists with the value 'D:\AppServ\nvm'."
            exit 0
          } else {
            [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] 'PATH' variable already exists, and so has been modified."
            exit 0
          }
        } else {
          Write-Host "[KO_FAILURE] unknown action 'append'."
          exit 1
        }
      } else {
        if (@('create', 'modify', 'append') -contains $action) {
          [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
          Write-Host "[OK_CHANGE] System environment variable 'PATH' created."
          exit 0
        } else {
          Write-Host "[OK_NO_CHANGE] 'PATH' system environment variable does not exist."
          exit 0
        }
      }
    } catch {
      $errorMessage = $_.Exception.Message
      Write-Host "Unexpected exception/error: $errorMessage"
      exit 1
    }
  register: envvar_handling_result
  changed_when: envvar_handling_result.rc == 0 and 'OK_CHANGE' in envvar_handling_result.stdout
  failed_when: envvar_handling_result.rc != 0 or 'KO_FAILURE' in envvar_handling_result.stdout
  ignore_errors: yes


        


- name: '[PRE-SETUP] (2/3) Append "C:\Program Files\nodejs" to "PATH"'
  win_shell: |
    function IsVar($var) {
      if ($null -eq $var) {return $false}
      if ($var -is [string]) {return -not [string]::IsNullOrEmpty($var)}
      if ($var -is [array] -or $var -is [System.Collections.IEnumerable]) {return $var.Count -ne 0}
      return $true
    }
    try {
      $newEnvVarValue = 'C:\Program Files\nodejs'
      $currentEnvVarValue = [Environment]::GetEnvironmentVariable("PATH", [System.EnvironmentVariableTarget]::Machine)
      $action = 'append'

      if (IsVar $currentEnvVarValue) {
        if ($action -eq 'append') {
          $envvarItemsList = $currentEnvVarValue -split ";"
          $envvarContainsNewVal = $envvarItemsList -contains $newEnvVarValue
          if (-not $envvarContainsNewVal) {
            $currentEnvVarValue += ';C:\Program Files\nodejs'
            [Environment]::SetEnvironmentVariable("PATH", $currentEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] New value appended to system environment variable 'PATH'."
            exit 0
          } else {
              Write-Host "[OK_NO_CHANGE] Value already in system environment variable 'PATH'."
              exit 0
            }
        } elseif ('PATH' -eq 'PATH') {
            Write-Host "[KO_FAILURE] Only 'append' action is allowed for 'PATH' environment variable."
            exit 1
        } elseif ($action -eq 'modify') {
          if ($currentEnvVarValue -eq 'C:\Program Files\nodejs') {
            Write-Host "[OK_NO_CHANGE] 'PATH' variable value already equals to 'C:\Program Files\nodejs'."
            exit 0
          } else {
            [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] System environment variable 'PATH' modified."
            exit 0
          }
        } elseif ($action -eq 'delete') {
          [Environment]::SetEnvironmentVariable("PATH", $null, [System.EnvironmentVariableTarget]::Machine)
          Write-Host "[OK_CHANGE] System environment variable 'PATH' deleted."
          exit 0
        } elseif ($action -eq 'create')  {
          if ($currentEnvVarValue -eq 'C:\Program Files\nodejs') {
            Write-Host "[OK_NO_CHANGE] 'PATH' variable already exists with the value 'C:\Program Files\nodejs'."
            exit 0
          } else {
            [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] 'PATH' variable already exists, and so has been modified."
            exit 0
          }
        } else {
          Write-Host "[KO_FAILURE] unknown action 'append'."
          exit 1
        }
      } else {
        if (@('create', 'modify', 'append') -contains $action) {
          [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
          Write-Host "[OK_CHANGE] System environment variable 'PATH' created."
          exit 0
        } else {
          Write-Host "[OK_NO_CHANGE] 'PATH' system environment variable does not exist."
          exit 0
        }
      }
    } catch {
      $errorMessage = $_.Exception.Message
      Write-Host "Unexpected exception/error: $errorMessage"
      exit 1
    }
  register: envvar_handling_result
  changed_when: envvar_handling_result.rc == 0 and 'OK_CHANGE' in envvar_handling_result.stdout
  failed_when: envvar_handling_result.rc != 0 or 'KO_FAILURE' in envvar_handling_result.stdout
  ignore_errors: yes


        



- name: '[PRE-SETUP] (2/3) Create file "D:\AppServ\nvm\settings.txt"'
  win_shell: |
    try {
      $fileContent = @"
    root: D:\AppServ\nvm
    path: C:\Program Files\nodejs
    arch: 64
    proxy: none

    "@
      Set-Content -Path "D:\AppServ\nvm\settings.txt" -Value $fileContent
    } catch {
        Write-Output "ERROR: $_"
        exit 1
    }




        




  

- name: '[PRE-SETUP] (2/3) Check if HTTP auth. is required to download "node-v14.17.3-win-x64.zip"'
  win_shell: |
    $url = "{{ pkgs_repo_base_url }}/nodejs/node-v14.17.3-win-x64.zip"
    $responseStatusCode = $(try { Invoke-WebRequest -Uri $url -Method Head -UseBasicParsing | % {$_.StatusCode} } catch {$_.Exception.Response.StatusCode.Value__})

    if ($responseStatusCode -eq 401) { 
        Write-Host "Auth required" 
    } else { 
        Write-Host "Auth not required" 
    }
  register: auth_check
  changed_when: false
  no_log: true

- name: '[PRE-SETUP] (2/3) Ensure destination "D:\AppServ\nvm\" exists'
  win_file: 
    path: 'D:\AppServ\nvm\'
    state: directory
  register: win_file_dest_check

- name: "[PRE-SETUP] (2/3) Download 'node-v14.17.3-win-x64.zip' (with authentication)"
  win_get_url:
    url: "{{ pkgs_repo_base_url }}/nodejs/node-v14.17.3-win-x64.zip"
    dest: '{{ win_temp_dir_path }}\node-v14.17.3-win-x64.zip'
    username: "{{ http_auth_username }}"
    password: "{{ http_auth_password }}"
  register: auth_dl_result
  when: "'Auth required' in auth_check.stdout"


- name: "[PRE-SETUP] (2/3) Download 'node-v14.17.3-win-x64.zip' (without authentication)"
  win_get_url:
    url: "{{ pkgs_repo_base_url }}/nodejs/node-v14.17.3-win-x64.zip"
    dest: '{{ win_temp_dir_path }}\node-v14.17.3-win-x64.zip'
  register: no_auth_dl_result
  when: "'Auth not required' in auth_check.stdout"

 

- name: "[PRE-SETUP] (2/3) Unzip 'node-v14.17.3-win-x64.zip' to user-defined destination"
  win_unzip:
    src: '{{ win_temp_dir_path }}\node-v14.17.3-win-x64.zip'
    dest: 'D:\AppServ\nvm\'
    creates: 'D:\AppServ\nvm\v14.17.3'
  when: "not win_file_dest_check.changed"

- name: "[PRE-SETUP] (2/3) [ALWAYS OVERWRITE DEST.] Unzip 'node-v14.17.3-win-x64.zip' to user-defined destination"
  win_unzip:
    src: '{{ win_temp_dir_path }}\node-v14.17.3-win-x64.zip'
    dest: 'D:\AppServ\nvm\'
  when: "win_file_dest_check.changed"




        



- name: '[PRE-SETUP] (2/3) Move/Rename "D:\AppServ\nvm\node-v14.17.3-win-x64"'
  win_shell: |
    try {
        Move-Item -Path "D:\AppServ\nvm\node-v14.17.3-win-x64" -Destination "D:\AppServ\nvm\v14.17.3"
    } catch {
        Write-Output "ERROR: $_"
        exit 1
    }
  ignore_errors: yes  


        




  

- name: '[PRE-SETUP] (2/3) Check if HTTP auth. is required to download "node-v16.16.0-win-x64.zip"'
  win_shell: |
    $url = "{{ pkgs_repo_base_url }}/nodejs/node-v16.16.0-win-x64.zip"
    $responseStatusCode = $(try { Invoke-WebRequest -Uri $url -Method Head -UseBasicParsing | % {$_.StatusCode} } catch {$_.Exception.Response.StatusCode.Value__})

    if ($responseStatusCode -eq 401) { 
        Write-Host "Auth required" 
    } else { 
        Write-Host "Auth not required" 
    }
  register: auth_check
  changed_when: false
  no_log: true

- name: '[PRE-SETUP] (2/3) Ensure destination "D:\AppServ\nvm\" exists'
  win_file: 
    path: 'D:\AppServ\nvm\'
    state: directory
  register: win_file_dest_check

- name: "[PRE-SETUP] (2/3) Download 'node-v16.16.0-win-x64.zip' (with authentication)"
  win_get_url:
    url: "{{ pkgs_repo_base_url }}/nodejs/node-v16.16.0-win-x64.zip"
    dest: '{{ win_temp_dir_path }}\node-v16.16.0-win-x64.zip'
    username: "{{ http_auth_username }}"
    password: "{{ http_auth_password }}"
  register: auth_dl_result
  when: "'Auth required' in auth_check.stdout"


- name: "[PRE-SETUP] (2/3) Download 'node-v16.16.0-win-x64.zip' (without authentication)"
  win_get_url:
    url: "{{ pkgs_repo_base_url }}/nodejs/node-v16.16.0-win-x64.zip"
    dest: '{{ win_temp_dir_path }}\node-v16.16.0-win-x64.zip'
  register: no_auth_dl_result
  when: "'Auth not required' in auth_check.stdout"

 

- name: "[PRE-SETUP] (2/3) Unzip 'node-v16.16.0-win-x64.zip' to user-defined destination"
  win_unzip:
    src: '{{ win_temp_dir_path }}\node-v16.16.0-win-x64.zip'
    dest: 'D:\AppServ\nvm\'
    creates: 'D:\AppServ\nvm\v16.16.0'
  when: "not win_file_dest_check.changed"

- name: "[PRE-SETUP] (2/3) [ALWAYS OVERWRITE DEST.] Unzip 'node-v16.16.0-win-x64.zip' to user-defined destination"
  win_unzip:
    src: '{{ win_temp_dir_path }}\node-v16.16.0-win-x64.zip'
    dest: 'D:\AppServ\nvm\'
  when: "win_file_dest_check.changed"




        



- name: '[PRE-SETUP] (2/3) Move/Rename "D:\AppServ\nvm\node-v16.16.0-win-x64"'
  win_shell: |
    try {
        Move-Item -Path "D:\AppServ\nvm\node-v16.16.0-win-x64" -Destination "D:\AppServ\nvm\v16.16.0"
    } catch {
        Write-Output "ERROR: $_"
        exit 1
    }
  ignore_errors: yes  


        




  

- name: '[PRE-SETUP] (2/3) Check if HTTP auth. is required to download "node-v18.18.0-win-x64.zip"'
  win_shell: |
    $url = "{{ pkgs_repo_base_url }}/nodejs/node-v18.18.0-win-x64.zip"
    $responseStatusCode = $(try { Invoke-WebRequest -Uri $url -Method Head -UseBasicParsing | % {$_.StatusCode} } catch {$_.Exception.Response.StatusCode.Value__})

    if ($responseStatusCode -eq 401) { 
        Write-Host "Auth required" 
    } else { 
        Write-Host "Auth not required" 
    }
  register: auth_check
  changed_when: false
  no_log: true

- name: '[PRE-SETUP] (2/3) Ensure destination "D:\AppServ\nvm\" exists'
  win_file: 
    path: 'D:\AppServ\nvm\'
    state: directory
  register: win_file_dest_check

- name: "[PRE-SETUP] (2/3) Download 'node-v18.18.0-win-x64.zip' (with authentication)"
  win_get_url:
    url: "{{ pkgs_repo_base_url }}/nodejs/node-v18.18.0-win-x64.zip"
    dest: '{{ win_temp_dir_path }}\node-v18.18.0-win-x64.zip'
    username: "{{ http_auth_username }}"
    password: "{{ http_auth_password }}"
  register: auth_dl_result
  when: "'Auth required' in auth_check.stdout"


- name: "[PRE-SETUP] (2/3) Download 'node-v18.18.0-win-x64.zip' (without authentication)"
  win_get_url:
    url: "{{ pkgs_repo_base_url }}/nodejs/node-v18.18.0-win-x64.zip"
    dest: '{{ win_temp_dir_path }}\node-v18.18.0-win-x64.zip'
  register: no_auth_dl_result
  when: "'Auth not required' in auth_check.stdout"

 

- name: "[PRE-SETUP] (2/3) Unzip 'node-v18.18.0-win-x64.zip' to user-defined destination"
  win_unzip:
    src: '{{ win_temp_dir_path }}\node-v18.18.0-win-x64.zip'
    dest: 'D:\AppServ\nvm\'
    creates: 'D:\AppServ\nvm\v18.18.0'
  when: "not win_file_dest_check.changed"

- name: "[PRE-SETUP] (2/3) [ALWAYS OVERWRITE DEST.] Unzip 'node-v18.18.0-win-x64.zip' to user-defined destination"
  win_unzip:
    src: '{{ win_temp_dir_path }}\node-v18.18.0-win-x64.zip'
    dest: 'D:\AppServ\nvm\'
  when: "win_file_dest_check.changed"




        



- name: '[PRE-SETUP] (2/3) Move/Rename "D:\AppServ\nvm\node-v18.18.0-win-x64"'
  win_shell: |
    try {
        Move-Item -Path "D:\AppServ\nvm\node-v18.18.0-win-x64" -Destination "D:\AppServ\nvm\v18.18.0"
    } catch {
        Write-Output "ERROR: $_"
        exit 1
    }
  ignore_errors: yes  


                  



  
- name: "Initialization.."
  win_file:
    path: '{{ win_temp_dir_path }}'
    state: directory


      
              

 

- name: "[PRE-SETUP] (3/3) Run user-provided script (Set to use Node.JS version 14.17.3)"
  win_shell: |
    nvm use 14.17.3

  register: script_result
  changed_when: script_result.rc == 0 and 'OK_CHANGE' in script_result.stdout
  failed_when: script_result.rc != 0 or 'KO_FAILURE' in script_result.stdout
  ignore_errors: yes    
              
          


  