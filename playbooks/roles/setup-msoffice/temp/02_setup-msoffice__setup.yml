---
- name: "Start operations.."
  meta: noop


- name: "Initialization.."
  win_file:
    path: '{{ win_temp_dir_path }}'
    state: directory


                    

- name: "[SETUP] (1/1) Check 'Microsoft Office Standard 2016' status *BEFORE* installation"
  win_shell: |
    $appName = "Microsoft Office Standard 2016"
    $wmiQuery = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*$appName*" }
    $regPath1 = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall"
    $regPath2 = "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
    $regCheck1 = Get-ChildItem -Path $regPath1 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    $regCheck2 = Get-ChildItem -Path $regPath2 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    if ($wmiQuery -or $regCheck1 -or $regCheck2) { $status = "Installed" } else { $status = "Not Installed" }
    Write-Host "$appName is $status"
  register: initial_software_status
  changed_when: false
  no_log: true


- name: "[SETUP] (1/1) Download 'Microsoft Office Standard 2016' files"
  win_get_url:
    url: "{{ pkgs_repo_base_url }}/ms-office-16/MS_Office_2016_32Bit_En_VL.zip"
    dest: '{{ win_temp_dir_path }}\MS_Office_2016_32Bit_En_VL.zip'
    url_username: "{{ http_auth_username }}"
    url_password: "{{ http_auth_password }}"
    timeout: 60
  when: "'Not Installed' in initial_software_status.stdout"

 


  
- name: "[SETUP] (1/1) Unzip 'MS_Office_2016_32Bit_En_VL.zip'"
  win_unzip:
    src: '{{ win_temp_dir_path }}\MS_Office_2016_32Bit_En_VL.zip'
    dest: '{{ win_temp_dir_path }}\MS_Office_2016_32Bit_En_VL'
    creates: '{{ win_temp_dir_path }}\MS_Office_2016_32Bit_En_VL'
  when: "'Not Installed' in initial_software_status.stdout"


- name: "[SETUP] (1/1) Check custom target installation directory"
  win_file:
    path: 'D:\AppServ'
    state: directory
  when: "'Not Installed' in initial_software_status.stdout"




- name: "[SETUP] (1/1) Install 'Microsoft Office Standard 2016'"
  win_shell: |
    $installResult = $null
    $installSuccess = $false

    Set-Location "{{ win_temp_dir_path }}\MS_Office_2016_32Bit_En_VL"
    $InstallerFile = "setup.exe"
    $InstArgList = "/config .\Config.xml"
    $successExitCodes = @()
    $successExitCodes += 0
    $successExitCodes += 3010
    $installResult = (Start-Process $InstallerFile -ArgumentList $InstArgList -Wait -PassThru -WindowStyle Hidden).ExitCode
    if ($successExitCodes -contains $installResult) {$installSuccess = $true}

    if (-not $installSuccess) {
        Write-Output "Microsoft Office Standard 2016 installation failed. Exit Code: $installResult"
        exit 1 }
  register: component_install_result
  failed_when: component_install_result.rc != 0 or 'installation failed' in component_install_result.stdout
  when: "'Not Installed' in initial_software_status.stdout"


- name: "[SETUP] (1/1) Check 'Microsoft Office Standard 2016' status *AFTER* installation"
  win_shell: |
    $appName = "Microsoft Office Standard 2016"
    $wmiQuery = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*$appName*" }
    $regPath1 = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall"
    $regPath2 = "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
    $regPath3 = "HKLM:\SOFTWARE"
    $regCheck1 = Get-ChildItem -Path $regPath1 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    $regCheck2 = Get-ChildItem -Path $regPath2 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    $regCheck3 = Get-ChildItem -Path $regPath3 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    if ($wmiQuery -or $regCheck1 -or $regCheck2 -or $regCheck3) { $status = "Installed" } else { $status = "Not Installed" }
    Write-Host "$appName is $status"
  register: new_software_status
  changed_when: false
  failed_when: new_software_status.rc != 0 or 'Not Installed' in new_software_status.stdout
  ignore_errors: no  
  when: "'Not Installed' in initial_software_status.stdout"

                  







  