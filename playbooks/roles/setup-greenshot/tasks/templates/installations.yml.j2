---
- name: "{{ label }} Init."
  win_file:
    path: "{% raw %}{{ temp_dir_path_ansible }}{% endraw %}"
    state: directory


{% for item in components %}

- name: "{{ label }} ({{ loop.index }}/{{ loop.length }}) Check '{{ item.software_fullname }}' installation status"
  win_shell: |
    $appName = "{{ item.software_fullname }}"
    $wmiQuery = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*$appName*" }
    $regPath1 = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall"
    $regPath2 = "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
    $regCheck1 = Get-ChildItem -Path $regPath1 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    $regCheck2 = Get-ChildItem -Path $regPath2 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    if ($wmiQuery -or $regCheck1 -or $regCheck2) { $status = "Installed" } else { $status = "Not Installed" }
    Write-Host "$appName is $status"
  register: software_status
  changed_when: false
  no_log: true


- name: "{{ label }} ({{ loop.index }}/{{ loop.length }}) Check if authentication is required for file download"
  win_shell: |
{% if item.file_relative_url is defined and item.file_relative_url is not none %}
    $url = "{% raw %}{{ artifactsrepo_base_url }}{% endraw %}/{{ item.file_relative_url }}"
{% elif item.file_full_url is defined and item.file_full_url is not none %}
    $url = "{{ item.file_full_url }}"
{% endif %}
    $responseStatusCode = $(try { Invoke-WebRequest -Uri $url -Method Head -UseBasicParsing | % {$_.StatusCode} } catch {$_.Exception.Response.StatusCode.Value__})

    if ($responseStatusCode -eq 401) { 
        Write-Host "Auth required" 
    } else { 
        Write-Host "Auth not required" 
    }
  register: auth_check
  changed_when: false
  no_log: true
  when: "'Not Installed' in software_status.stdout"


- name: "{{ label }} ({{ loop.index }}/{{ loop.length }}) Download '{{ item.software_fullname }}' files (with authentication)"
  win_get_url:
{% if item.file_relative_url is defined and item.file_relative_url is not none %}
    url: "{% raw %}{{ artifactsrepo_base_url }}{% endraw %}/{{ item.file_relative_url }}"
    dest: "{% raw %}{{ temp_dir_path_ansible }}{% endraw %}\\{{ item.file_relative_url.split('/')[-1] }}"
{% elif item.file_full_url is defined and item.file_full_url is not none %}
    url: "{{ item.file_full_url }}"
    dest: "{% raw %}{{ temp_dir_path_ansible }}{% endraw %}\\{{ item.file_full_url.split('/')[-1] }}"
{% endif %}
    username: "{% raw %}{{ http_auth_username }}{% endraw %}"
    password: "{% raw %}{{ http_auth_password }}{% endraw %}"
  when: "'Not Installed' in software_status.stdout and 'Auth required' in auth_check.stdout"


- name: "{{ label }} ({{ loop.index }}/{{ loop.length }}) Download '{{ item.software_fullname }}' files (without authentication)"
  win_get_url:
{% if item.file_relative_url is defined and item.file_relative_url is not none %}
    url: "{% raw %}{{ artifactsrepo_base_url }}{% endraw %}/{{ item.file_relative_url }}"
    dest: "{% raw %}{{ temp_dir_path_ansible }}{% endraw %}\\{{ item.file_relative_url.split('/')[-1] }}"
{% elif item.file_full_url is defined and item.file_full_url is not none %}
    url: "{{ item.file_full_url }}"
    dest: "{% raw %}{{ temp_dir_path_ansible }}{% endraw %}\\{{ item.file_full_url.split('/')[-1] }}"
{% endif %}
  when: "'Not Installed' in software_status.stdout and 'Auth not required' in auth_check.stdout"

{% set file_url = item.file_relative_url | default(item.file_full_url) %}

{% if item.type in ['bundle', 'zip'] %}
- name: "{{ label }} ({{ loop.index }}/{{ loop.length }}) Unzip '{{ file_url.split('/')[-1] }}'"
  win_unzip:
    src: "{% raw %}{{ temp_dir_path_ansible }}{% endraw %}\\{{ file_url.split('/')[-1] }}"
    dest: "{% raw %}{{ temp_dir_path_ansible }}{% endraw %}\\{{ file_url.split('/')[-1].split('.')[0] }}"
    creates: "{% raw %}{{ temp_dir_path_ansible }}{% endraw %}\\{{ file_url.split('/')[-1].split('.')[0] }}"
{% endif %}

- name: "{{ label }} ({{ loop.index }}/{{ loop.length }}) Install '{{ item.software_fullname }}'"
  win_shell: |
    $installResult = $null
    $installSuccess = $false
{% if item.type == 'msi' %}
    $installResult = (Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"{% raw %}{{ temp_dir_path_win }}{% endraw %}\{{ file_url.split('/')[-1] }}`" /qn" -Wait -PassThru).ExitCode
    if ($installResult -eq 0) {$installSuccess = $true}
{% elif item.type == 'exe' %} {# Typically for common installer like NSIS #}
    $installResult = (Start-Process -FilePath "{% raw %}{{ temp_dir_path_win }}{% endraw %}\{{ file_url.split('/')[-1] }}" -ArgumentList "{{ item.arguments | default("") }}" -Wait -PassThru).ExitCode
    {# "0" as exit success code; typically for common installers like NSIS #}
    # "0" as exit success code; typically for common installers like NSIS
    if ($installResult -eq 0) {$installSuccess = $true}
{% elif item.type == 'zip' %}
    # 1. unzip the file to "Program Files"
    # 2. add or not to start menu / desktop (whole folder or specific executable)
    # 3. add "uninstaller" [via registry / delete only]
    # 4. Custom configs: e.g. workspace location for Eclipse
    $installResult = 0
{% elif item.type == 'bundle' %}
    Set-Location "{% raw %}{{ temp_dir_path_win }}{% endraw %}\{{ file_url.split('/')[-1].split('.')[0] }}"
    $InstallerFile = "{{ item.installer_file_path }}"
    $InstArgList = "{{ item.arguments | default("") }}"
    $successExitCodes = @()
{% set all_exit_codes = item.success_exit_codes | default([0]) %}
{% for exit_code in all_exit_codes %}
    $successExitCodes += {{ exit_code }}
{% endfor %}
    $installResult = (Start-Process $InstallerFile -ArgumentList $InstArgList -Wait -PassThru -WindowStyle Hidden).ExitCode
    if ($successExitCodes -contains $installResult) {$installSuccess = $true}
{% endif %}
    if (-not $installSuccess) {
        Write-Output "{{ item.software_fullname }} installation failed. Exit Code: $installResult"
        exit 1 }
  register: component_install_result
  failed_when: 
    - "'installation failed' in component_install_result.stdout"
    - component_install_result.rc != 0
  when: "'Not Installed' in software_status.stdout"

{% endfor %}
