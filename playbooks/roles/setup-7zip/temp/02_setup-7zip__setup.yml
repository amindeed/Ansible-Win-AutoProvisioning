---
- name: "Start operations.."
  meta: noop


- name: "Initialization.."
  win_file:
    path: '{{ win_temp_dir_path }}'
    state: directory


                    

- name: "[SETUP] (1/1) Check '7-Zip' status *BEFORE* installation"
  win_shell: |
    $appName = "7-Zip"
    $wmiQuery = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*$appName*" }
    $regPath1 = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall"
    $regPath2 = "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
    $regCheck1 = Get-ChildItem -Path $regPath1 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    $regCheck2 = Get-ChildItem -Path $regPath2 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    if ($wmiQuery -or $regCheck1 -or $regCheck2) { $status = "Installed" } else { $status = "Not Installed" }
    Write-Host "$appName is $status"
  register: initial_software_status
  changed_when: false
  no_log: true


- name: "[SETUP] (1/1) Download '7-Zip' files"
  win_get_url:
    url: "{{ pkgs_repo_base_url }}/7zip/7z2301-x64.msi"
    dest: '{{ win_temp_dir_path }}\7z2301-x64.msi'
    url_username: "{{ http_auth_username }}"
    url_password: "{{ http_auth_password }}"
    timeout: 60
  when: "'Not Installed' in initial_software_status.stdout"

 


  


- name: "[SETUP] (1/1) Check custom target installation directory"
  win_file:
    path: 'D:\AppServ'
    state: directory
  when: "'Not Installed' in initial_software_status.stdout"




- name: "[SETUP] (1/1) Install '7-Zip'"
  win_shell: |
    $installResult = $null
    $installSuccess = $false

    $installResult = (Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"{{ win_temp_dir_path }}\7z2301-x64.msi`" INSTALLDIR=`"D:\AppServ\7-Zip`" TARGETDIR=`"D:\AppServ\7-Zip`" INSTALLLOCATION=`"D:\AppServ\7-Zip`" INSTALLFOLDER=`"D:\AppServ\7-Zip`" INSTALLPATH=`"D:\AppServ\7-Zip`" APPLICATIONFOLDER=`"D:\AppServ\7-Zip`" APPDIR=`"D:\AppServ\7-Zip`" ARPINSTALLLOCATION=`"D:\AppServ\7-Zip`" /qn " -Wait -PassThru).ExitCode
    if ($installResult -eq 0) {$installSuccess = $true}


    if (-not $installSuccess) {
        Write-Output "7-Zip installation failed. Exit Code: $installResult"
        exit 1 }
  register: component_install_result
  failed_when: component_install_result.rc != 0 or 'installation failed' in component_install_result.stdout
  when: "'Not Installed' in initial_software_status.stdout"


- name: "[SETUP] (1/1) Check '7-Zip' status *AFTER* installation"
  win_shell: |
    $appName = "7-Zip"
    $wmiQuery = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*$appName*" }
    $regPath1 = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall"
    $regPath2 = "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
    $regPath3 = "HKLM:\SOFTWARE"
    $regCheck1 = Get-ChildItem -Path $regPath1 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    $regCheck2 = Get-ChildItem -Path $regPath2 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    $regCheck3 = Get-ChildItem -Path $regPath3 | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    if ($wmiQuery -or $regCheck1 -or $regCheck2 -or $regCheck3) { $status = "Installed" } else { $status = "Not Installed" }
    Write-Host "$appName is $status"
  register: new_software_status
  changed_when: false
  failed_when: new_software_status.rc != 0 or 'Not Installed' in new_software_status.stdout
  ignore_errors: no  
  when: "'Not Installed' in initial_software_status.stdout"

                  







  