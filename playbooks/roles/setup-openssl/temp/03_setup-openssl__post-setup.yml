---
- name: "Start operations.."
  meta: noop


- name: "Initialization.."
  win_file:
    path: '{{ win_temp_dir_path }}'
    state: directory


                    


- name: '[POST-SETUP] (1/1) Append "D:\AppServ\OpenSSL-Win64\bin" to "PATH"'
  win_shell: |
    function IsVar($var) {
      if ($null -eq $var) {return $false}
      if ($var -is [string]) {return -not [string]::IsNullOrEmpty($var)}
      if ($var -is [array] -or $var -is [System.Collections.IEnumerable]) {return $var.Count -ne 0}
      return $true
    }
    try {
      $newEnvVarValue = 'D:\AppServ\OpenSSL-Win64\bin'
      $currentEnvVarValue = (Get-Item -Path "HKLM:\System\CurrentControlSet\Control\Session Manager\Environment").GetValue('PATH',$null,'DoNotExpandEnvironmentNames')
      $action = 'append'

      if (IsVar $currentEnvVarValue) {
        if ($action -eq 'append') {
          #$envvarItemsList = $currentEnvVarValue -split ";"
          #$envvarContainsNewVal = $envvarItemsList -contains $newEnvVarValue

          if ($currentEnvVarValue -notlike "*$newEnvVarValue*") {
            $currentEnvVarValue += ';D:\AppServ\OpenSSL-Win64\bin'
            #[Environment]::SetEnvironmentVariable("PATH", $currentEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            New-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Session Manager\Environment" -Name "PATH" -Value $currentEnvVarValue -PropertyType ExpandString -Force
            Write-Host "[OK_CHANGE] New value appended to system environment variable 'PATH'."
            exit 0
          } else {
              Write-Host "[OK_NO_CHANGE] Value already in system environment variable 'PATH'."
              exit 0
            }
        } elseif ('PATH' -ieq 'PATH') {
            Write-Host "[KO_FAILURE] Only 'append' action is allowed for 'PATH' environment variable."
            exit 1
        } elseif ($action -eq 'modify') {
          if ($currentEnvVarValue -eq 'D:\AppServ\OpenSSL-Win64\bin') {
            Write-Host "[OK_NO_CHANGE] 'PATH' variable value already equals to 'D:\AppServ\OpenSSL-Win64\bin'."
            exit 0
          } else {
            [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] System environment variable 'PATH' modified."
            exit 0
          }
        } elseif ($action -eq 'delete') {
          [Environment]::SetEnvironmentVariable("PATH", $null, [System.EnvironmentVariableTarget]::Machine)
          Write-Host "[OK_CHANGE] System environment variable 'PATH' deleted."
          exit 0
        } elseif ($action -eq 'create')  {
          if ($currentEnvVarValue -eq 'D:\AppServ\OpenSSL-Win64\bin') {
            Write-Host "[OK_NO_CHANGE] 'PATH' variable already exists with the value 'D:\AppServ\OpenSSL-Win64\bin'."
            exit 0
          } else {
            [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "[OK_CHANGE] 'PATH' variable already exists, and so has been modified."
            exit 0
          }
        } else {
          Write-Host "[KO_FAILURE] unknown action 'append'."
          exit 1
        }
      } else {
        if (@('create', 'modify', 'append') -contains $action) {
          [Environment]::SetEnvironmentVariable("PATH", $newEnvVarValue, [System.EnvironmentVariableTarget]::Machine)
          Write-Host "[OK_CHANGE] System environment variable 'PATH' created."
          exit 0
        } else {
          Write-Host "[OK_NO_CHANGE] 'PATH' system environment variable does not exist."
          exit 0
        }
      }
    } catch {
      $errorMessage = $_.Exception.Message
      Write-Host "Unexpected exception/error: $errorMessage"
      exit 1
    }
  register: envvar_handling_result
  changed_when: envvar_handling_result.rc == 0 and 'OK_CHANGE' in envvar_handling_result.stdout
  failed_when: envvar_handling_result.rc != 0 or 'KO_FAILURE' in envvar_handling_result.stdout
  ignore_errors: yes


                  



  