---
- name: "{{ label }} Create Temp directory"
  win_file:
    path: "{% raw %}{{ temp_dir_path_ansible }}{% endraw %}"
    state: directory


{% for item in components %}

- name: "{{ label }} ({{ loop.index }}/{{ loop.length }}) Check {{ item.software_fullname }} installation status"
  win_shell: |
    $app = Get-WmiObject -Class Win32_Product |
    Where-Object {$_.Name -like "{{ item.software_fullname }}*"} |
    Sort-Object -Property Name |
    Select-Object Name
    if($app) { $status = "Installed" } else { $status = "Not Installed" }
    Write-Host "{{ item.software_fullname }} is $status"
  register: software_status
  changed_when: false
  no_log: true


- name: "{{ label }} ({{ loop.index }}/{{ loop.length }}) Download {{ item.software_fullname }} installer"
  win_get_url:
    url: "{% raw %}{{ artifact_base_url }}{% endraw %}/{{ item.installer_relative_path }}"
    dest: "{% raw %}{{ temp_dir_path_ansible }}{% endraw %}\\{{ item.installer_relative_path.split('/')[1] }}"
    username: "{% raw %}{{ http_auth_username }}{% endraw %}"
    password: "{% raw %}{{ http_auth_password }}{% endraw %}"
  when: "'Not Installed' in software_status.stdout"


- name: "{{ label }} ({{ loop.index }}/{{ loop.length }}) Install {{ item.software_fullname }}"
  win_shell: |
    $installResult = $null
    $installerType = "{{ item.type }}"
    if ($installerType -eq "msi") {
      $installResult = (Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"{% raw %}{{ temp_dir_path_win }}{% endraw %}\{{ item.installer_relative_path.split('/')[1] }}`" /qn" -Wait -PassThru).ExitCode
    }
    elseif ($installerType -eq "exe") {
      $installResult = (Start-Process -FilePath "{% raw %}{{ temp_dir_path_win }}{% endraw %}\{{ item.installer_relative_path.split('/')[1] }}" -ArgumentList "{{ item.arguments }}" -Wait -PassThru).ExitCode
    }
    if ($installResult -ne 0) {
        Write-Output "{{ item.software_fullname }} installation failed. Exit Code: $installResult"
        exit 1 }
  register: install_output
  failed_when: "'installation failed' in install_output.stdout"
  when: "'Not Installed' in software_status.stdout"

{% endfor %}
