---
- name: "[INSTALL] Init."
  win_file:
    path: "{{ temp_dir_path_ansible }}"
    state: directory



- name: "[INSTALL] (1/1) Check OpenSSL installation status"
  win_shell: |
    $app = Get-WmiObject -Class Win32_Product |
    Where-Object {$_.Name -like "OpenSSL*"} |
    Sort-Object -Property Name |
    Select-Object Name
    if($app) { $status = "Installed" } else { $status = "Not Installed" }
    Write-Host "OpenSSL is $status"
  register: software_status
  changed_when: false
  no_log: true


- name: "[INSTALL] (1/1) Download OpenSSL installer"
  win_get_url:
    url: "{{ artifact_base_url }}/openssl/Win64OpenSSL_Light-3_1_2.msi"
    dest: "{{ temp_dir_path_ansible }}\\Win64OpenSSL_Light-3_1_2.msi"
    username: "{{ http_auth_username }}"
    password: "{{ http_auth_password }}"
  when: "'Not Installed' in software_status.stdout"


- name: "[INSTALL] (1/1) Install OpenSSL"
  win_shell: |
    $installResult = $null
    $installerType = "msi"
    if ($installerType -eq "msi") {
      $installResult = (Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"{{ temp_dir_path_win }}\Win64OpenSSL_Light-3_1_2.msi`" /qn" -Wait -PassThru).ExitCode
    }
    elseif ($installerType -eq "exe") {
      $installResult = (Start-Process -FilePath "{{ temp_dir_path_win }}\Win64OpenSSL_Light-3_1_2.msi" -ArgumentList "" -Wait -PassThru).ExitCode
    }
    if ($installResult -ne 0) {
        Write-Output "OpenSSL installation failed. Exit Code: $installResult"
        exit 1 }
  register: install_output
  failed_when: "'installation failed' in install_output.stdout"
  when: "'Not Installed' in software_status.stdout"

