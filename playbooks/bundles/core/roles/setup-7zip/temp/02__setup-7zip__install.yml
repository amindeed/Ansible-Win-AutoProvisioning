---
- name: "[INSTALL] Init."
  win_file:
    path: "{{ temp_dir_path_ansible }}"
    state: directory



- name: "[INSTALL] (1/1) Check 7-Zip installation status"
  win_shell: |
    $appName = "7-Zip"
    $wmiQuery = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*$appName*" }
    $regPath = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall"
    $regCheck = Get-ChildItem -Path $regPath | Where-Object { $_.GetValue("DisplayName") -like "*$appName*" }
    if ($wmiQuery -or $regCheck) { $status = "Installed" } else { $status = "Not Installed" }
    Write-Host "$appName is $status"
  register: software_status
  changed_when: false
  no_log: true


- name: "[INSTALL] (1/1) Download 7-Zip installer"
  win_get_url:
    url: "{{ artifact_base_url }}/7zip/7z2301-x64.msi"
    dest: "{{ temp_dir_path_ansible }}\\7z2301-x64.msi"
    username: "{{ http_auth_username }}"
    password: "{{ http_auth_password }}"
  when: "'Not Installed' in software_status.stdout"


- name: "[INSTALL] (1/1) Install 7-Zip"
  win_shell: |
    $installResult = $null
    $installerType = "msi"
    if ($installerType -eq "msi") {
      $installResult = (Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"{{ temp_dir_path_win }}\7z2301-x64.msi`" /qn" -Wait -PassThru).ExitCode
    }
    elseif ($installerType -eq "exe") {
      $installResult = (Start-Process -FilePath "{{ temp_dir_path_win }}\7z2301-x64.msi" -ArgumentList "" -Wait -PassThru).ExitCode
    }
    if ($installResult -ne 0) {
        Write-Output "7-Zip installation failed. Exit Code: $installResult"
        exit 1 }
  register: install_output
  failed_when: "'installation failed' in install_output.stdout"
  when: "'Not Installed' in software_status.stdout"

